{"version":3,"sources":["logo.96aff77c.jpg","Components/Header.js","Components/Body.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","today","Date","console","log","getDate","getMonth","getFullYear","className","class","src","logo","alt","width","style","margin","this","fechaActual","Component","funcionBoton","alert","Body","props","titulo","textoArray","map","e","index","key","onClick","type","Footer","position","bottom","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,2C,4MCuB5BC,E,4KAhBP,IAAIC,EAAQ,IAAIC,KAEhB,OADAC,QAAQC,IAAIH,GACLA,EAAMI,UAAY,IAAMJ,EAAMK,WAAa,IAAML,EAAMM,gB,+BAI9D,OACI,yBAAKC,UAAU,aACX,yBAAKC,MAAM,8CAAX,2DACA,yBAAKC,IAAKC,IAAMC,IAAI,OAAOH,MAAM,0BAA0BI,MAAM,MAAMC,MAAO,CAAEC,OAAQ,UACxF,yBAAKN,MAAM,8CAA8CO,KAAKC,oB,GAbzDC,a,MCArB,SAASC,IACLC,MAAM,QA0BKC,MAvBf,SAAcC,GAGV,OAEI,yBAAKd,UAAU,iBACX,4BAAKc,EAAMC,QAEX,4BAEQD,EAAME,WAAWC,KAAI,SAACC,EAAGC,GAAJ,OACjB,4BAAI,wBAAIC,IAAKD,GAAQD,QAMjC,4BAAQG,QAASV,EAAcW,KAAK,SAASrB,MAAM,mBAAnD,eCVGsB,MAXf,WACI,OACI,yBAAKvB,UAAU,aACX,4BAAQC,MAAM,oCAAoCK,MAAO,CAAEkB,SAAU,QAASC,OAAQ,IAAKpB,MAAO,SAAlG,mDCqBGqB,E,uKAfX,OACE,yBAAK1B,UAAU,aAEb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEe,OAAO,2BACPC,WAAY,CAAC,uBAAwB,eAAgB,4BAA6B,YAAa,WAEjG,kBAAC,EAAD,W,GAdUN,aCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.cab1c6d7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.96aff77c.96aff77c.jpg\";","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport logo from '../logo.96aff77c.jpg'\n\nclass Header extends Component {\n\n    fechaActual() {\n        var today = new Date();\n        console.log(today)\n        return today.getDate() + \"/\" + today.getMonth() + \"/\" + today.getFullYear();\n    }\n\n    render() {\n        return (\n            <div className=\"bootstrap\">\n                <div class=\"p-3 mb-2 bg-success text-white text-center\">Desarrollo de Aplicaciones para Dispositivos Móviles</div>\n                <img src={logo} alt=\"logo\" class=\"rounded mx-auto d-block\" width=\"500\" style={{ margin: \"30px\" }} />\n                <div class=\"p-3 mb-2 bg-success text-white text-center\">{this.fechaActual()}</div>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React from 'react'\nimport '../App.css';\n\n\nfunction funcionBoton() {\n    alert(\"Hola\");\n};\n\nfunction Body(props) {\n\n\n    return (\n\n        <div className=\"bootstrap App\">\n            <h1>{props.titulo}</h1>\n\n            <ol>\n                {\n                    props.textoArray.map((e, index) =>\n                        <h3><li key={index}>{e}</li></h3>\n                    )\n                }\n            </ol>\n\n\n            <button onClick={funcionBoton} type=\"button\" class=\"btn btn-success\">Dar click</button>\n        </div>\n\n    );\n}\n\nexport default Body;","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nfunction Footer() {\n    return (\n        <div className=\"bootstrap\">\n            <footer class=\"bg-success text-white text-center\" style={{ position: \"fixed\", bottom: \"0\", width: \"100%\" }} >\n                Copyright © Todos los derechos reservados.\n            </footer>\n        </div>\n\n    );\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport Header from './Components/Header';\nimport Body from './Components/Body';\nimport Footer from './Components/Footer';\n\nclass App extends Component {\n\n\n  render() {\n\n\n    return (\n      <div className=\"bootstrap\">\n\n        <Header></Header>\n        <Body\n          titulo=\"Práctica 1 - Unidad 2\"\n          textoArray={[\"Tipos de componentes\", \"Contenedores\", \"Usar mas de un componente\", \"Funciones\", \"Props\"]}\n        />\n        <Footer />\n      </div>\n    )\n  };\n}\n\n\nexport default App;\n\n\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <h1>Prueba !#</h1>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n*/\n/*Componentes de tipo clase\nclass App extends Component {\n  render(){\n\n  return (\n    //Ract Fragment en vez de Div\n    <Fragment>\n      <h1>JavaScript</h1>\n      <h1>React</h1>\n      <h1>Native</h1>\n    </Fragment>\n  )};\n}*/\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}